/*
 * OpenSource Issue Tr√§cking System
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Contact: DevBoxFanBoy@github.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package rest

import (
	"fmt"
	"github.com/DevBoxFanBoy/opists/pkg/api/router"
	"github.com/DevBoxFanBoy/opists/pkg/api/v1"
	"github.com/gorilla/mux"
	"net/http"
	"strings"
)

// A ProjectsApiController binds http requests to an api service and writes the service results to the http response
type ProjectsApiController struct {
	service v1.ProjectsApiServicer
}

// NewProjectsApiController creates a default api controller
func NewProjectsApiController(s v1.ProjectsApiServicer) router.Router {
	return &ProjectsApiController{service: s}
}

// Routes returns all of the api route for the ProjectsApiController
func (c *ProjectsApiController) Routes() router.Routes {
	return router.Routes{
		{
			"GetAllProject",
			strings.ToUpper("Get"),
			"/v1/projects",
			c.GetAllProject,
		},
		{
			"GetProject",
			strings.ToUpper("Get"),
			"/v1/projects/{projectKey}",
			c.GetProject,
		},
	}
}

// GetAllProject - Returns all projects
func (c *ProjectsApiController) GetAllProject(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetAllProject()
	if err != nil {
		router.InternalError(w, err)
		return
	}
	router.EncodeJSONResponse(result, nil, w)
}

// GetProject - Returns the Project by key
func (c *ProjectsApiController) GetProject(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectKey := params["projectKey"]
	if projectKey == "" {
		router.BadRequest(
			w,
			fmt.Errorf("projectKey is required"),
		)
		return
	}
	result, err := c.service.GetProject(projectKey)
	if err != nil {
		router.InternalError(w, err)
		return
	}

	router.EncodeJSONResponse(result, nil, w)
}
