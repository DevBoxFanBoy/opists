/*
 * OpenSource Issue Tr√§cking System
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Contact: DevBoxFanBoy@github.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package issues

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/DevBoxFanBoy/opists/pkg/api/router"
	"github.com/DevBoxFanBoy/opists/pkg/api/v1"
	"github.com/DevBoxFanBoy/opists/pkg/api/v1/model"
	"github.com/gorilla/mux"
	"net/http"
	"strings"
)

// A ApiController binds http requests to an api service and writes the service results to the http response
type ApiController struct {
	service v1.IssuesApiServicer
}

// NewApiController creates a default api controller
func NewApiController(s v1.IssuesApiServicer) router.Router {
	return &ApiController{service: s}
}

// Routes returns all of the api route for the ApiController
func (c *ApiController) Routes() router.Routes {
	return router.Routes{
		{
			"AddIssue",
			strings.ToUpper("Post"),
			"/v1/projects/{projectKey}/issues",
			c.AddIssue,
		},
		{
			"DeleteIssue",
			strings.ToUpper("Delete"),
			"/v1/projects/{projectKey}/issues/{id}",
			c.DeleteIssue,
		},
		{
			"GetIssueById",
			strings.ToUpper("Get"),
			"/v1/projects/{projectKey}/issues/{id}",
			c.GetIssueById,
		},
		{
			"GetProjectIssues",
			strings.ToUpper("Get"),
			"/v1/projects/{projectKey}/issues",
			c.GetProjectIssues,
		},
		{
			"UpdateIssue",
			strings.ToUpper("Put"),
			"/v1/projects/{projectKey}/issues",
			c.UpdateIssue,
		},
	}
}

// AddIssue - Add a new issue to the tracking system
func (c *ApiController) AddIssue(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectKey := params["projectKey"]
	if errorResponse, err := validateProjectKey(projectKey); err != nil {
		router.BadRequestErrorResponse(w, errorResponse.(model.ErrorResponse))
		return
	}
	body := &model.CreationIssue{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		router.InternalError(w, err)
		return
	}
	if len(body.ProjectKey) == 0 {
		body.ProjectKey = projectKey
	}
	reserve := int64(-1)
	issue := model.Issue{
		Id:              &reserve,
		Name:            body.Name,
		Description:     body.Description,
		Status:          body.Status,
		Priority:        body.Priority,
		ProjectKey:      body.ProjectKey,
		Components:      body.Components,
		Sprints:         body.Sprints,
		EstimatedPoints: body.EstimatedPoints,
		EstimatedTime:   body.EstimatedTime,
		AffectedVersion: body.AffectedVersion,
		FixedVersion:    body.FixedVersion,
	}
	result, err := c.service.AddIssue(projectKey, issue)
	if err != nil {
		errRes := result.(model.ErrorResponse)
		router.HandleErrorResponses(w, errRes)
		return
	}
	status := http.StatusCreated
	w.Header().Set("Location", fmt.Sprintf("%v/%v", r.RequestURI, result))
	router.EncodeJSONResponse(``, &status, w)
}

// DeleteIssue - Deletes a Issue
func (c *ApiController) DeleteIssue(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectKey := params["projectKey"]
	if errorResponse, err := validateProjectKey(projectKey); err != nil {
		router.BadRequestErrorResponse(w, errorResponse.(model.ErrorResponse))
		return
	}
	issueId := params["id"]
	if errorResponse, err := validateIssueId(issueId); err != nil {
		router.BadRequestErrorResponse(w, errorResponse.(model.ErrorResponse))
		return
	}
	id, err := router.ParseIntParameter(issueId)
	if err != nil {
		router.BadRequest(w, errors.New(fmt.Sprintf("ID %v is invalid!", issueId)))
		return
	}
	result, err := c.service.DeleteIssue(projectKey, id)
	if err != nil {
		errRes := result.(model.ErrorResponse)
		router.HandleErrorResponses(w, errRes)
		return
	}
	status := http.StatusNoContent
	router.EncodeJSONResponse(``, &status, w)
}

// GetIssueById - Find Issue by ID
func (c *ApiController) GetIssueById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectKey := params["projectKey"]
	if errorResponse, err := validateProjectKey(projectKey); err != nil {
		router.BadRequestErrorResponse(w, errorResponse.(model.ErrorResponse))
		return
	}
	issueId := params["id"]
	if errorResponse, err := validateIssueId(issueId); err != nil {
		router.BadRequestErrorResponse(w, errorResponse.(model.ErrorResponse))
		return
	}
	id, err := router.ParseIntParameter(issueId)
	if err != nil || id < 0 {
		router.BadRequest(w, errors.New(fmt.Sprintf("ID %v is invalid!", issueId)))
		return
	}

	result, err := c.service.GetIssueById(projectKey, id)
	if err != nil {
		errRes := result.(model.ErrorResponse)
		router.HandleErrorResponses(w, errRes)
		return
	}

	router.EncodeJSONResponse(result, nil, w)
}

// GetProjectIssues - Returns all Issues of the Project.
func (c *ApiController) GetProjectIssues(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectKey := params["projectKey"]
	if errorResponse, err := validateProjectKey(projectKey); err != nil {
		router.BadRequestErrorResponse(w, errorResponse.(model.ErrorResponse))
		return
	}
	result, err := c.service.GetProjectIssues(projectKey)
	if err != nil {
		errRes := result.(model.ErrorResponse)
		router.HandleErrorResponses(w, errRes)
		return
	}

	router.EncodeJSONResponse(result, nil, w)
}

// UpdateIssue - Update an existing issue
func (c *ApiController) UpdateIssue(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectKey := params["projectKey"]
	if errorResponse, err := validateProjectKey(projectKey); err != nil {
		router.BadRequestErrorResponse(w, errorResponse.(model.ErrorResponse))
		return
	}
	body := &model.Issue{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		router.InternalError(w, err)
		return
	}
	result, err := c.service.UpdateIssue(projectKey, *body)
	if err != nil {
		errRes := result.(model.ErrorResponse)
		router.HandleErrorResponses(w, errRes)
		return
	}
	status := http.StatusNoContent
	router.EncodeJSONResponse(``, &status, w)
}

func validateProjectKey(projectKey string) (interface{}, error) {
	if len(projectKey) == 0 {
		err := errors.New(fmt.Sprintf("ProjectKey %v is invalid!", projectKey))
		return model.ErrorResponse{
			Code:    400,
			Message: err.Error(),
		}, err
	}
	return nil, nil
}

func validateIssueId(issueId string) (interface{}, error) {
	if len(issueId) == 0 {
		err := errors.New(fmt.Sprintf("Issue ID %v is invalid!", issueId))
		return model.ErrorResponse{
			Code:    400,
			Message: err.Error(),
		}, err
	}
	return nil, nil
}
