/*
 * OpenSource Issue Tr√§cking System
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Contact: DevBoxFanBoy@github.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package router

import (
	"encoding/json"
	"fmt"
	"github.com/DevBoxFanBoy/opists/pkg/api/v1/model"
	"github.com/DevBoxFanBoy/opists/pkg/logger"
	"github.com/gorilla/mux"
	"io/ioutil"
	"net/http"
	"net/http/pprof"
	"os"
	"strconv"
)

// A Route defines the parameters for an api endpoint
type Route struct {
	Name        string
	Method      string
	Pattern     string
	HandlerFunc http.HandlerFunc
}

// Routes are a collection of defined api endpoints
type Routes []Route

// Router defines the required methods for retrieving api routes
type Router interface {
	Routes() Routes
}

// NewRouter creates a new router for any number of api routers
func NewRouter(routers ...Router) *mux.Router {
	router := mux.NewRouter().StrictSlash(true)
	for _, api := range routers {
		for _, route := range api.Routes() {
			var handler http.Handler
			handler = route.HandlerFunc
			handler = logger.Logger(handler, route.Name)

			router.PathPrefix("/rest").
				Methods(route.Method).
				Path(route.Pattern).
				Name(route.Name).
				Handler(handler)
		}
	}

	return router
}

func AddRoutes(router *mux.Router, prefix string, routers ...Router) {
	for _, api := range routers {
		for _, route := range api.Routes() {
			var handler http.Handler
			handler = route.HandlerFunc
			handler = logger.Logger(handler, route.Name)

			router.PathPrefix(prefix).
				Methods(route.Method).
				Path(route.Pattern).
				Name(route.Name).
				Handler(handler)
		}
	}
}

func AddFaviconRoute(router *mux.Router) {
	router.Methods("GET").Path("/favicon.ico").HandlerFunc(GetFaviconResource)
}

func GetFaviconResource(w http.ResponseWriter, r *http.Request) {
	body, err := ioutil.ReadFile("favicon.ico")
	if err != nil {
		http.Error(w, http.StatusText(404), 404)
		return
	}
	fmt.Fprintf(w, "%s", body)
}

func AddPProf(router *mux.Router) {
	router.HandleFunc("/debug/pprof/", pprof.Index)
	router.HandleFunc("/debug/pprof/cmdline", pprof.Cmdline)
	router.HandleFunc("/debug/pprof/profile", pprof.Profile)
	router.HandleFunc("/debug/pprof/symbol", pprof.Symbol)
	router.Handle("/debug/pprof/allocs", pprof.Handler("allocs"))
	router.Handle("/debug/pprof/block", pprof.Handler("block"))
	router.Handle("/debug/pprof/goroutine", pprof.Handler("goroutine"))
	router.Handle("/debug/pprof/heap", pprof.Handler("heap"))
	router.Handle("/debug/pprof/mutex", pprof.Handler("mutex"))
	router.Handle("/debug/pprof/threadcreate", pprof.Handler("threadcreate"))
}

// EncodeJSONResponse uses the json encoder to write an interface to the http response with an optional status code
func EncodeJSONResponse(i interface{}, status *int, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if status != nil {
		w.WriteHeader(*status)
	} else {
		w.WriteHeader(http.StatusOK)
	}
	if i == nil {
		return json.NewEncoder(w).Encode("")
	}
	return json.NewEncoder(w).Encode(i)
}

func NotFoundError(w http.ResponseWriter, err error) {
	errorResponse := model.ErrorResponse{
		Code:    404,
		Message: err.Error(),
	}
	status := http.StatusNotFound
	EncodeJSONResponse(errorResponse, &status, w)
}

func InternalError(w http.ResponseWriter, err error) {
	errorResponse := model.ErrorResponse{
		Code:    500,
		Message: err.Error(),
	}
	status := http.StatusInternalServerError
	EncodeJSONResponse(errorResponse, &status, w)
}

func BadRequest(w http.ResponseWriter, err error) {
	errorResponse := model.ErrorResponse{
		Code:    400,
		Message: err.Error(),
	}
	status := http.StatusBadRequest
	EncodeJSONResponse(errorResponse, &status, w)
}

func BadRequestErrorResponse(w http.ResponseWriter, errorResponse model.ErrorResponse) {
	status := http.StatusBadRequest
	EncodeJSONResponse(errorResponse, &status, w)
}

func HandleErrorResponses(w http.ResponseWriter, errorResponse model.ErrorResponse) {
	switch errorResponse.Code {
	case 400:
		BadRequestErrorResponse(w, errorResponse)
		return
	case 404:
		NotFoundErrorResponse(w, errorResponse)
	default:
		InternalErrorResponse(w, errorResponse)
		return
	}
}

func NotFoundErrorResponse(w http.ResponseWriter, errorResponse model.ErrorResponse) {
	status := http.StatusNotFound
	EncodeJSONResponse(errorResponse, &status, w)
}

func InternalErrorResponse(w http.ResponseWriter, errorResponse model.ErrorResponse) {
	status := http.StatusInternalServerError
	EncodeJSONResponse(errorResponse, &status, w)
}

// ReadFormFileToTempFile reads file data from a request form and writes it to a temporary file
func ReadFormFileToTempFile(r *http.Request, key string) (*os.File, error) {
	r.ParseForm()
	formFile, _, err := r.FormFile(key)
	if err != nil {
		return nil, err
	}

	defer formFile.Close()
	file, err := ioutil.TempFile("tmp", key)
	if err != nil {
		return nil, err
	}

	defer file.Close()
	fileBytes, err := ioutil.ReadAll(formFile)
	if err != nil {
		return nil, err
	}

	file.Write(fileBytes)
	return file, nil
}

// parseIntParameter parses a sting parameter to an int64
func ParseIntParameter(param string) (int64, error) {
	return strconv.ParseInt(param, 10, 64)
}
