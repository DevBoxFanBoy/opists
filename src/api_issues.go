/*
 * OpenSource Issue Tr√§cking System
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Contact: DevBoxFanBoy@github.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package opists

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A IssuesApiController binds http requests to an api service and writes the service results to the http response
type IssuesApiController struct {
	service IssuesApiServicer
}

// NewIssuesApiController creates a default api controller
func NewIssuesApiController(s IssuesApiServicer) Router {
	return &IssuesApiController{service: s}
}

// Routes returns all of the api route for the IssuesApiController
func (c *IssuesApiController) Routes() Routes {
	return Routes{
		{
			"AddIssue",
			strings.ToUpper("Post"),
			"/v1/projects/{projectKey}/issues",
			c.AddIssue,
		},
		{
			"DeleteIssue",
			strings.ToUpper("Delete"),
			"/v1/projects/{projectKey}/issues/{id}",
			c.DeleteIssue,
		},
		{
			"GetIssueById",
			strings.ToUpper("Get"),
			"/v1/projects/{projectKey}/issues/{id}",
			c.GetIssueById,
		},
		{
			"GetProjectIssues",
			strings.ToUpper("Get"),
			"/v1/projects/{projectKey}/issues",
			c.GetProjectIssues,
		},
		{
			"UpdateIssue",
			strings.ToUpper("Put"),
			"/v1/projects/{projectKey}/issues",
			c.UpdateIssue,
		},
	}
}

// AddIssue - Add a new issue to the tracking system
func (c *IssuesApiController) AddIssue(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectKey := params["projectKey"]
	body := &Issue{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.AddIssue(projectKey, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// DeleteIssue - Deletes a Issue
func (c *IssuesApiController) DeleteIssue(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectKey := params["projectKey"]
	id, err := parseIntParameter(params["id"])
	if err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.DeleteIssue(projectKey, id)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// GetIssueById - Find Issue by ID
func (c *IssuesApiController) GetIssueById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectKey := params["projectKey"]
	id, err := parseIntParameter(params["id"])
	if err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.GetIssueById(projectKey, id)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// GetProjectIssues - Returns all Issues of the Project.
func (c *IssuesApiController) GetProjectIssues(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectKey := params["projectKey"]
	result, err := c.service.GetProjectIssues(projectKey)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// UpdateIssue - Update an existing issue
func (c *IssuesApiController) UpdateIssue(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectKey := params["projectKey"]
	body := &Issue{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.UpdateIssue(projectKey, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}
